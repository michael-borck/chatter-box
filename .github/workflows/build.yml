name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Vite app
        run: npm run build

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run electron:build -- --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run electron:build -- --mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run electron:build -- --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-distributables
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.pkg
            dist/*.AppImage
            dist/*.deb
            dist/*.snap
            dist/*.yml
            dist/*.yaml

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Talk Buddy ${{ github.ref_name }}" \
            --notes "## Talk Buddy Release ${{ github.ref_name }}
            
            ### Downloads
            
            #### Windows
            - \`Talk Buddy-Setup-*.exe\` - Windows installer
            
            #### macOS
            - \`Talk Buddy-*.dmg\` - macOS installer
            
            #### Linux
            - \`Talk Buddy-*.AppImage\` - Universal Linux app
            - \`Talk Buddy-*.deb\` - Debian/Ubuntu package
            
            ### Installation Instructions
            
            **Windows:** Download and run the .exe installer
            
            **macOS:** Download the .dmg file, open it, and drag Talk Buddy to Applications
            
            **Linux:** 
            - AppImage: Make executable with \`chmod +x\` and run
            - DEB: Install with \`sudo dpkg -i Talk\ Buddy-*.deb\`
            
            ### Requirements
            - Microphone access for speech recognition
            - Internet connection for AI services
            - Speaches server for text-to-speech (configurable)
            - Ollama or OpenAI API for conversation AI (configurable)
            
            ### What's New
            - Collapsible dark-themed sidebar
            - Resume in-progress sessions
            - Improved TTS with gender-specific models
            - Better error handling for STT/TTS services
            - Configurable speech speed
            - Many UI/UX improvements"

      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Upload all artifacts to the release
          find release-artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.zip" \) -exec gh release upload "${{ github.ref_name }}" {} \;