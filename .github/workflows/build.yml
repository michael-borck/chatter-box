name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      # Build Electron app for Windows
      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: npm run electron:build -- --win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build Electron app for macOS (DMG)
      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run electron:build -- --mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}

      # Build Electron app for macOS (MAS)
      - name: Build Electron app (MAS)
        if: matrix.os == 'macos-latest'
        run: npm run electron:build -- --mac mas
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}

      # Build Electron app for Linux
      - name: Build Electron app (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: npm run electron:build -- --linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the built app to GitHub Release
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.pkg
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.snap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}